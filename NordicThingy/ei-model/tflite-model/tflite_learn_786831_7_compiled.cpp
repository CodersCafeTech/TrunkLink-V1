/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 30.09.2025 10:41:19

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1968;
#else
constexpr int kTensorArenaSize = 944;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,600 } };
const TfArray<1, float> quant0_scale = { 1, { 0.656574547290802, } };
const TfArray<1, int> quant0_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4] = { 17, 5, -35, 27, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const TfArray<1, float> quant1_scale = { 1, { 0.0011671471875160933, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data2[4*10] = { 
  75, 69, 126, -50, 6, -107, -127, -34, 125, 58, 
  68, -29, -105, -120, -97, -101, 11, 39, -46, 24, 
  -105, 116, -82, -106, 94, -105, 115, 71, 71, -81, 
  20, -27, 1, 55, 38, -52, 96, -36, -103, -119, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 4,10 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0050138132646679878, } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&g0::quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[10] = { 27, -9, 10, 16, -42, 29, -25, -21, -4, 37, };
const TfArray<1, int> tensor_dimension3 = { 1, { 10 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00097013020422309637, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[10*20] = { 
  40, -82, -76, 13, 105, 14, 117, -114, -5, -54, 37, 18, 64, 116, 54, -86, -1, -28, -76, 26, 
  -56, -116, 79, 69, 56, -37, -44, -102, -94, 28, -52, -47, 72, 34, 76, 99, -59, 38, -39, -31, 
  -22, -100, -4, 109, -50, -60, -37, 19, -44, -14, 35, 55, -22, -88, -14, -71, 86, -104, -106, -84, 
  59, 11, 92, 0, -71, 77, -58, -53, -31, 73, 115, 52, -79, -95, -9, -53, -30, -59, 105, 85, 
  -45, 69, -100, -48, -89, 75, -30, 25, -97, 76, 93, 65, -16, 61, 30, -100, -58, 101, 85, 56, 
  -93, 70, -73, 55, -30, -121, -6, 81, -123, -52, 91, 65, -57, 65, -28, -73, -34, 63, -75, 11, 
  98, 53, -60, -81, 83, 83, 10, -31, -28, 4, 62, 46, -75, -40, 13, -14, 65, -17, -17, -36, 
  -13, 101, 57, 73, -9, 94, 97, -110, 127, -21, -65, 121, 77, -24, -100, 59, 93, 9, 22, 96, 
  62, 37, 53, 37, 88, 30, -110, -32, -40, 6, 93, 19, -11, -117, -38, 96, -95, 70, -53, -45, 
  44, -75, -20, -1, 87, 103, -26, 12, 81, -103, -65, 43, -81, -64, 56, -19, -15, 93, -1, 81, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 10,20 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0036622143816202879, } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&g0::quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[20] = { -15, -15, -10, 6, -7, -13, 13, 23, 18, -21, 9, -17, -3, 12, -7, -10, 17, -6, -12, 22, };
const TfArray<1, int> tensor_dimension5 = { 1, { 20 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00068595586344599724, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[20*600] = { 
  1, -10, -25, 79, 30, 40, 30, -60, 26, -70, -5, 28, -78, -60, -26, 85, 25, 59, -41, -45, 74, -20, 78, 11, -80, 61, -49, -40, -61, -88, 28, 33, 50, -71, -84, 34, -52, 70, -16, -55, 45, -16, -65, -26, -89, 80, -31, 71, -56, -64, -26, -82, 41, -31, -74, 63, 77, 69, 96, 44, 35, -34, 0, -65, -13, -74, 3, 31, 71, -9, 21, -88, -54, -27, -29, -48, 63, 35, -9, 76, 22, 0, -15, 24, -18, 13, -101, -10, -68, -93, 34, -19, -50, 80, -8, -89, 92, 52, -70, -31, -3, -95, 25, 49, -26, -30, -34, 2, -42, -43, 69, 35, 4, 53, -41, 85, -50, 36, -93, 18, 48, 2, 7, 88, -93, -31, 58, 3, 60, -15, -79, -66, 86, 30, 62, -49, 8, 79, -22, 8, 35, -1, -58, -67, -34, -16, -29, 46, -52, -54, -39, 55, -29, 56, 30, -38, 74, 23, -97, 2, 34, 65, -45, -37, -34, -33, -65, -66, 64, 79, -52, -12, -23, -31, -8, 66, 47, 53, -64, -70, 16, 31, -87, -57, 7, 29, -38, -86, 47, 4, 87, -69, 17, 90, 40, 38, -59, 58, -83, -6, -40, 55, 82, 17, 26, -59, 52, -50, 33, 55, 87, 54, -29, -28, -27, -27, -21, -40, -34, -44, 35, 48, 45, -74, 75, -60, -20, -54, -86, 98, -32, -79, -36, -40, -80, -63, 74, 20, 71, 73, -37, -57, 38, -53, 70, 68, -47, 4, -43, 88, 31, 55, -10, 39, -93, -41, -5, 27, -39, 28, 0, 81, -45, 5, -5, 74, -19, 75, 66, 75, 52, -38, -22, -8, -17, -101, -77, 36, -30, -47, 81, -64, 18, -34, -65, 2, -63, -43, -29, -27, -25, 97, 13, -49, 76, 32, -19, -17, 12, 60, 4, 52, 11, -90, 49, -45, 86, -87, 26, 37, -27, -97, -9, -26, -5, 4, -4, -57, 4, -81, 31, -36, 2, 13, 23, -80, -19, 28, -4, -31, -29, 23, -87, -30, -12, 62, -6, 77, -91, -64, -80, -80, 39, 27, -47, 35, -60, -29, 24, -41, 59, 87, -69, -102, 27, 2, -20, -45, 51, -9, -19, -25, 44, 86, 40, -16, -59, 31, -48, 82, 21, -51, 51, 62, -2, 29, -87, -55, 35, -15, 38, 70, -34, 24, 80, -75, -26, -52, 60, -49, 46, -31, -76, -2, 23, -89, -15, -88, 17, 49, -22, 27, 27, 50, 5, -77, 60, 1, 4, -26, 8, 83, 19, 2, -27, -90, 81, -52, 94, -102, 61, 66, -70, 69, 72, -47, 78, -4, -69, 49, 87, 62, 88, 14, -81, 22, 85, 75, -40, 17, -50, -20, -12, -58, -65, -14, 59, 36, -56, -41, 92, -19, 36, -81, 79, 8, -60, -38, -54, 3, -65, 88, -3, -57, 62, -68, -63, 9, -75, -10, 37, -34, 50, 31, -61, 70, -62, -21, 32, 11, 91, -2, -75, -16, 63, 13, -83, -1, -36, -12, -9, -39, 86, -25, -16, -32, -56, 84, -52, 55, -72, -16, -73, 1, 78, -17, -43, 75, -57, 14, 92, 49, -17, -27, 16, 7, 13, -74, -55, 8, -56, 25, -61, -5, 6, 56, 16, 5, 22, 95, -57, -34, 10, -91, 23, 85, 6, -71, -24, -89, 14, -10, 59, -33, 42, 73, -61, -46, 20, -36, 50, 33, -87, 62, -39, -24, -43, -100, 77, 81, 45, 9, 39, -58, -1, 96, -81, 51, -85, -96, -54, -11, 1, -19, 37, 1, 91, 40, 46, 70, 38, 47, -77, 56, -48, -46, -75, 78, 36, 39, -42, 51, 12, -50, 6, 25, -15, -17, 53, 51, 
  -95, -11, 87, 18, -28, 30, 37, 28, 58, 89, -63, 50, 0, 4, 56, -57, 65, 47, 91, -58, -11, -10, 72, -16, 46, 33, -15, 68, -37, -68, -8, 74, 74, 96, 47, -41, -68, -27, 6, -35, -58, -71, 89, 44, 35, -31, 45, -79, -4, -29, -97, -28, -30, -46, -29, -117, -94, 58, 56, -77, -37, 45, -35, -37, -32, 4, 53, -96, 55, -45, 80, -47, 33, -12, 17, 55, -34, -46, -27, 73, 4, -105, -45, 21, 39, 9, 1, -67, 15, -5, 33, 17, 96, 27, 2, 66, -40, -73, 27, -76, 16, 97, 8, -10, -61, 45, 51, -57, -20, -46, -22, -85, 67, 31, -21, 71, 28, 24, -70, -59, 25, -82, -29, -45, 54, -16, -1, 39, -88, 84, -46, -41, 53, -50, 70, 47, -82, -40, -31, 37, -94, -2, -15, -45, -16, 66, 58, 28, -34, -48, -55, -36, -35, -42, -53, 75, 52, 63, -55, -50, -71, -68, 43, -53, -68, -43, -81, 26, -94, -29, -5, -73, 33, -21, -24, 60, 60, -29, -49, -40, -72, 17, 50, 33, -30, 81, -6, -31, 59, 95, 63, 37, 78, 89, -10, 27, -40, -76, -81, 93, 63, -38, -74, -2, -62, -3, 39, 71, 34, 52, -55, -14, -9, -18, -71, -9, 18, 18, -14, -85, -72, -84, 17, -44, 27, 72, -30, -16, -37, -71, 98, 72, 78, 56, -59, -44, 14, -11, 0, 11, -96, 59, 22, 80, -7, -13, -18, -70, 28, 66, 34, -52, 4, 26, 100, 29, -40, -7, -77, 34, -88, -29, 64, -52, 57, -36, -86, -28, 68, -76, -63, -42, 59, 38, 80, -78, 55, -8, 34, -10, -59, -50, 15, 31, 29, -30, 37, -93, 93, -80, 15, -31, -34, 23, -17, -9, -22, 11, 34, 7, 80, -11, -39, -8, 10, -33, -55, -23, -100, 23, 22, 49, 65, -87, 72, -45, 69, 78, 4, 11, -35, 74, 29, -89, 64, -9, 17, -42, 57, -12, -46, -37, -7, 90, 59, 93, -39, 7, 78, -67, 63, 69, -10, 32, 21, 39, 9, -71, -64, -95, 88, 50, 55, 29, 78, -47, -33, -85, -82, -29, -80, 21, 80, 48, -44, 87, 25, 80, -95, -37, -57, -16, 48, 26, -36, 56, -106, -103, 54, -5, -90, 62, -52, 77, 48, -21, -19, -43, -73, 62, -54, -51, -30, -65, 42, -9, 91, 55, -23, -73, 11, 26, -51, -29, 8, 73, -10, -35, -21, -60, 88, -35, -69, 91, -80, -35, -12, -45, -66, -51, -12, 66, 77, -69, 5, -63, -25, 54, -4, -35, 52, -38, -49, -44, 74, -78, 9, -29, 70, 55, 40, -13, -20, 62, 54, 30, 37, 60, -12, 49, 24, -25, 24, -80, 35, 41, -23, 29, 41, 60, 13, 15, 12, 84, -5, -76, -37, 51, 33, -86, -71, 74, -28, 101, -40, 38, 76, -51, 1, 93, 48, -25, 24, -72, 36, 6, -60, 49, 13, 106, -38, -24, 62, -50, -63, 21, 58, -21, -62, -32, -73, 33, 6, -28, 10, 86, 62, 103, -68, 27, -59, 5, -92, 91, 79, -22, -6, 12, -79, 85, 15, -66, -1, 5, -47, -85, 15, 46, -79, 58, -14, -65, 19, -57, -80, -42, -84, -70, -45, 38, 44, 38, -44, 85, -93, 75, -8, -4, 42, 13, 37, -43, -74, 11, 51, 59, -35, 104, -17, -45, -18, 31, -68, -25, -3, 11, 40, 30, -71, 5, 86, -10, 91, 51, 69, -29, -14, 29, 49, 98, 69, -75, -23, -36, 76, 67, -60, -21, -29, -98, -42, -65, -91, -3, 50, 38, 19, -75, -109, -72, 
  69, -8, -69, -63, 39, -42, 60, 79, 90, -4, -67, 15, -62, 55, -53, 69, 36, 55, 2, 40, 90, -90, 50, -79, 11, -21, 81, 45, -44, -81, -50, 61, 43, -68, -9, -33, -81, 2, 53, -76, 55, 48, -92, -12, 37, -21, -42, -69, 31, -16, 50, -24, -7, -1, 49, -67, 12, 15, 18, -25, 93, -25, -11, 26, -18, 57, 24, -47, -25, -29, -4, -88, 10, 78, -13, -74, -84, 54, -40, -59, 39, -45, 31, -4, 12, 15, -24, 2, -70, -3, -61, 83, 16, -27, 93, 56, 34, 42, 20, 29, -96, -91, -44, -77, 38, -30, 75, 62, 15, -13, -52, 54, 8, -82, -59, -80, 39, 89, -20, 36, -53, 81, 94, -93, 84, 77, 21, 60, -82, -8, 46, -58, 16, 42, 47, 47, -40, 64, 60, 46, -17, 79, 97, 82, -70, -1, -77, 20, -43, 13, 52, -57, -27, 19, 31, 97, 58, -34, 79, -64, 16, 71, 27, 93, 0, -50, -39, -20, -29, -20, -83, -23, -6, -98, -25, 6, 44, -46, -51, -95, 55, -68, -12, 81, -48, 5, 38, -19, 35, -71, -1, 19, -40, 66, -4, -70, 18, -81, -71, 4, 83, -8, 21, -23, -77, -70, 31, 16, -89, 84, 74, -92, -32, -27, 55, 37, -74, 64, 81, -79, -13, 19, 58, -37, -59, 15, 21, -90, -63, -15, 6, 34, -32, 16, 91, -1, 56, 9, 56, -58, -63, 86, -78, -21, 32, -75, 14, 9, 85, -29, 22, 54, 81, -43, 56, -39, -77, 74, -88, -70, 32, -58, 4, -78, -36, 57, 59, -35, 27, 27, 36, 30, 58, -20, 0, 3, -34, -41, -60, -51, 47, -44, -44, 24, -51, 1, 19, -59, 55, -94, -33, -73, 88, 90, 85, -24, 72, -37, 57, -65, 71, 67, 30, -64, 3, -43, 7, -23, 85, 17, -44, 77, -58, 20, 80, -7, 94, 89, -17, 79, -3, -78, 6, 88, 67, 89, -92, 19, -51, 41, 34, 20, 21, -38, -47, 41, -60, -40, -11, -40, 75, 82, -14, -66, 76, 79, 26, -79, 49, 78, 38, 5, 70, -77, -62, -42, -47, 32, 81, -66, -73, -27, 5, 89, -43, 90, -24, -73, -26, -47, 22, -6, -81, -47, -12, -23, -76, -50, -90, -31, 22, -43, -48, 27, -43, -63, -44, -37, -24, 76, -69, 29, -54, 27, -30, 82, 80, 31, -17, -62, 46, -91, 62, 57, 92, -23, 78, 8, -28, 53, -24, 51, -87, 57, 46, -14, -51, 7, -11, -82, 78, -58, -39, -63, 2, -25, 17, -90, 36, 66, -21, -89, 0, -82, 90, -9, -6, -94, -20, -34, -74, -4, 91, -49, -32, 58, -22, -29, -28, 73, -8, -31, -18, 70, -1, -60, -8, 19, 14, 37, 55, 38, 10, -42, -23, 46, 50, 57, 83, 10, -19, 3, -99, 5, -37, -68, -23, 66, -18, -88, -40, -82, 45, 57, -10, 59, -21, 57, 34, -86, 73, -39, 62, 92, 51, 65, 70, -83, 89, 30, 10, -82, -33, 37, 37, -58, 40, 66, 59, 16, 21, -88, 57, 36, 91, 23, -20, -41, 51, -43, -2, -40, -69, -83, 90, -76, 12, 37, 71, 10, -57, 14, 34, -82, 88, -7, 14, -82, -51, -77, -26, 67, 65, 72, -8, -14, -77, -47, -7, -60, -90, 71, -64, -76, 34, -31, 87, 38, 3, 17, -34, -70, -71, -45, -16, -92, -51, 80, 32, 88, 37, -76, 10, 59, -55, 8, -67, -7, -75, 88, 29, -46, 8, 7, -3, 79, 13, 40, -94, -47, -52, -79, 16, -55, -78, 82, -72, -12, 17, 52, 
  -77, 33, -52, 55, -20, 50, -11, 78, 43, -85, 63, 69, 40, 47, 32, -28, -80, -53, 23, 50, -68, 28, -66, -40, 50, 41, -72, 51, 70, 56, -48, 28, 72, -50, 47, 6, 82, -96, 12, 53, -83, 50, -10, 63, 84, -81, -16, -62, 47, 26, -64, -11, -34, -98, 15, -83, -83, -97, -44, -14, 78, 26, 84, 61, -68, -87, 47, -88, -59, -89, 44, -47, -54, -79, 20, 32, -32, 88, 36, 83, 14, 58, 59, -35, -21, -79, -15, -42, 52, -45, 30, 25, -85, -1, 68, -45, -67, -29, 62, -35, -42, -18, 61, -63, -53, -18, 2, -31, 5, 22, -81, 5, -8, 64, -3, 78, -87, -5, 61, -7, -93, 73, 3, 24, -80, 4, -4, -57, 21, 29, -34, -89, -27, 77, -22, -50, -68, 15, 3, 59, 52, 54, 21, -41, 11, 14, -44, -68, -35, -77, -30, -62, 67, 76, -64, 22, 27, 84, -65, -85, -40, 27, 67, 45, -63, 14, -45, -78, 23, 1, -102, -52, -13, -96, 43, 28, 19, 29, 52, -104, -34, 46, 67, 63, -21, -102, -18, 45, 0, -57, -20, -77, -3, -69, 5, 83, -47, -63, -58, -41, -45, -24, -57, -35, 4, -6, 7, 63, 82, -2, -7, 71, -7, -22, -38, -40, -85, -18, -82, -64, 80, 23, 61, -35, 85, -98, 60, -99, -56, 10, -8, 80, -98, 74, -70, 13, -42, -14, 62, 77, -9, 19, 63, -88, -90, -33, 4, 10, -98, -38, -93, 27, -28, -93, -3, -40, -68, 75, 78, 33, -25, -65, 31, -46, -76, -24, 45, -58, -20, -55, 30, 75, 20, -56, -78, -20, 55, -38, -41, 3, 81, 88, 40, 14, 80, -63, 63, -64, -65, -20, -54, -74, -103, 56, -31, -68, 23, -52, -46, 26, -41, -38, -3, -102, -7, 0, 12, -26, 80, -48, 23, 36, 24, 51, 84, 24, 55, -52, -72, -87, -49, -62, -79, -83, -15, -64, 21, -80, -62, 52, 78, 54, 13, -10, 2, 79, 33, 83, 17, -55, 20, -61, -60, 31, 16, -3, -25, -86, -70, -40, 32, -89, -32, 31, 4, 41, -9, -31, 35, -83, 24, 11, -75, -9, 23, 12, 45, -51, -64, 57, 14, 10, -14, 64, 87, 10, 81, 16, 16, -33, -71, -51, -88, -52, 10, 11, -38, 4, -16, 100, 43, -13, -12, 89, -39, 59, 56, -81, 92, -52, -13, -21, 53, -41, -39, -104, -48, 25, 79, 79, 12, -54, 54, -55, 5, 29, 8, -20, 91, -81, -16, 68, -20, 38, 69, -90, -26, -1, -50, -25, -7, -90, -2, -39, 37, 64, -58, -40, -71, -32, 18, -26, 49, -21, 67, -36, 57, -9, -13, 27, 56, 37, 93, 18, 59, 9, -103, -5, -27, -5, -5, 83, -85, 59, 15, -79, -43, -38, 26, 63, 38, 73, -67, -55, 89, -63, 70, 14, 35, 77, -37, -5, -73, -28, 35, 9, -73, 58, -11, -50, -75, -4, 71, -71, 79, -14, -98, -35, 77, 22, 42, 57, 69, -72, -84, 55, -60, 22, -69, 21, 69, 83, -95, -58, 50, 66, -51, -43, 74, -39, -55, -7, 27, 57, 17, 34, -31, -37, -69, 23, -1, -90, 23, 89, -19, 4, 88, -89, 29, 49, -94, -50, -67, 54, 74, 29, -2, -6, 79, 11, -28, -17, -48, -57, -70, 85, 30, -73, -50, 70, -97, -2, 11, 9, -58, 42, 7, -33, 71, 84, -91, 34, -100, -50, -3, 80, -14, 47, 67, -62, -53, -9, 21, 77, 71, 10, 33, 29, 32, -46, -58, 15, 4, -82, -24, -59, 76, 61, -71, 41, 
  69, 22, 7, -66, -71, -79, 69, -25, -54, 46, -36, 8, -66, -52, -74, 43, 48, 51, -15, -33, -22, 79, -26, -25, -37, 2, 59, 55, -81, -82, 34, -54, 73, -74, -30, -54, -34, -88, 14, 50, 7, 22, -86, -36, 46, -62, 66, 48, -21, 60, 50, 64, -74, -32, -32, 91, 49, 64, 82, 44, -88, -77, 76, 77, 0, 42, -48, 89, -101, -30, -82, 17, 57, 32, 31, 36, -28, -32, -52, -39, 63, -97, 38, -72, 24, -64, 12, -73, 51, -42, -41, -9, 17, 54, 15, -2, 11, -30, -72, -78, -26, -85, 16, -29, 79, -55, -85, -29, -70, 32, -65, -11, -55, -11, 29, -10, -43, -69, -51, -19, 78, -26, -63, -17, -81, -3, 80, -77, -50, 31, -33, -24, 31, -21, -29, -27, 45, 40, -91, 64, 20, 9, 59, 2, 56, -89, 63, 9, -80, -91, -20, 43, -41, -71, 39, 84, 65, -55, 72, -77, -39, 50, -91, -25, -98, -68, 14, -39, 78, -33, -31, -94, -80, 46, 43, 6, -43, 43, -36, 23, -45, 2, 27, 27, 17, -80, -48, -64, 66, -64, 72, -44, 30, -64, -46, 63, -10, -28, -5, -61, -73, 80, 5, -91, -73, -83, -25, -20, -48, -1, 67, 50, 20, 23, 73, 14, -22, -85, 36, 42, 17, -30, 15, -22, -59, 58, 6, 64, -45, -25, -60, -35, 40, -43, 79, -62, -47, 87, -37, -49, 88, 66, -89, -80, 49, -62, 45, -34, 80, -95, 75, -97, 33, -99, -2, 84, 48, -20, 39, 0, -8, 73, -85, 55, 53, 64, -85, 74, -37, 78, 18, -49, -52, 45, -62, -13, 14, -43, 37, 32, 78, 13, 12, -14, 27, -13, -19, 13, 47, -94, 29, 16, -72, -69, 58, -31, -83, 29, -54, -101, 17, -32, -25, 33, 3, -11, -84, 58, -61, -52, -58, -84, -34, -19, -14, 59, 31, 10, 68, -95, -86, -3, 55, 22, -46, 35, -84, -26, 93, -65, -39, 72, -93, 60, -36, -90, -64, 80, -16, 71, 11, -62, -29, -76, 85, -22, -22, -64, 64, 70, -51, -97, -99, -97, 87, -46, 67, -86, -58, -63, -91, -30, -71, -50, -11, 72, -98, -49, -3, -80, -50, -39, -73, -86, -22, -5, -22, 66, 20, -72, 7, 29, -15, 4, -89, 41, -6, -7, -11, 1, 19, -65, 84, -54, -71, 12, -31, 39, 40, -19, 80, 36, -8, 37, -45, 1, 16, 46, -85, -83, 33, 0, 21, -3, -86, -5, 49, -55, -33, -2, -3, 42, 11, 69, 79, -91, 75, 57, 10, -72, -62, -13, -48, 44, -19, 43, 32, -59, 1, 87, -11, 32, -9, -97, -91, 69, -66, -63, -13, -4, -64, -45, -89, -28, 74, 83, 10, 43, 18, 6, 68, 46, 43, -68, -66, 8, 17, -43, 46, -63, -17, -66, 27, -57, 60, -31, -97, -89, -43, -33, 23, -40, 34, -52, 1, -62, 18, -87, -9, -95, 44, -97, 83, -3, 72, -24, -82, 17, -46, 54, 50, -44, -32, -88, -26, -59, 69, 72, -80, 76, -80, 70, 39, -18, -85, 12, -12, -49, -19, 47, 22, 13, 67, -39, 78, 72, -87, 48, 73, 14, -50, -47, -28, 52, 16, 23, -42, 35, 88, -30, -57, 59, -61, -61, -39, -8, -44, -55, -96, -76, 7, 81, -55, 19, 55, -56, -39, -88, 48, -75, -75, 19, 68, -1, -55, -89, 49, 80, -92, 35, -54, -92, -25, 33, 62, -67, 68, -72, 8, 42, -73, -89, -91, 42, -57, -95, 40, -84, 26, -41, -53, 15, 88, -53, -96, 69, -66, 68, 12, 41, 
  -30, 75, 9, -7, -33, -80, 5, 90, -36, 19, -92, -34, -92, 37, 12, -2, -85, 21, -29, 6, -78, -78, -9, -54, 64, -25, 18, -17, -43, 85, -21, -14, 66, -60, 13, -92, 60, -62, 32, 79, 62, 30, -66, -25, 10, -91, -67, -70, -3, 63, 75, -15, 35, -43, 42, 61, 28, -11, 59, 4, 24, -84, 59, -70, -21, -1, -32, 75, 75, 44, 85, -50, 63, -70, -100, -63, -12, -21, 55, -1, -80, 31, -48, 66, -13, -70, 20, -10, 94, -21, 8, 5, -64, 69, 3, -16, -12, 29, -8, 57, -15, 22, 73, -52, 15, 13, 96, -67, 29, 54, -17, -10, 28, 48, 66, 17, 40, -69, 24, -64, -87, 50, -80, 17, 4, 82, -16, -32, -45, -87, 14, 31, -60, -25, 18, 80, 47, -76, 68, 87, 45, -5, 0, -58, 12, -49, 81, 86, 84, -45, 72, 26, 29, -82, 64, -8, -30, 66, -37, -7, 48, -98, 47, -82, 48, -92, 84, -62, 49, 7, -17, 76, -78, -12, -82, 24, -81, -33, 86, 39, 74, 29, -96, -71, -15, -55, 3, -46, 88, -77, -43, 86, 48, 19, 15, -63, 91, -14, 63, 6, -17, 30, 66, 52, -87, -69, -75, -32, 17, 59, 42, -31, -34, -32, 62, -75, -56, 78, 21, -88, -59, 88, -29, -50, 65, 31, -88, -30, -68, 70, -22, 66, 43, -50, -87, 12, 14, -19, -50, -55, 63, -87, 11, 15, 30, 25, 82, 28, -49, 9, 38, -36, 36, -28, 3, -91, 13, -92, 51, -1, -78, 46, -29, -49, -12, 99, -95, 87, 49, 10, 7, -67, 71, -53, 14, 47, -24, 14, 91, -36, -65, 51, -82, 29, 32, 0, -52, -78, -8, 13, 23, 12, -76, -14, -13, 75, -81, 87, -84, -67, -76, -79, 84, 13, -30, -65, -94, -41, -74, -26, 90, 80, -1, 7, -72, 75, -29, 73, -3, 33, 34, -73, 66, 69, 68, 91, -19, -73, -7, 26, 26, -24, 49, 51, 70, 27, -8, -78, 45, -93, -5, 36, 5, -68, -72, -32, 98, -31, 82, 83, -11, 35, 40, 82, 0, -59, -20, -80, -88, 75, -14, -34, -12, -70, 56, 8, 15, -4, -28, 17, 31, 82, -49, 55, 79, -51, 80, -6, -27, -12, -61, -48, -75, -27, -78, -88, 31, -3, 35, 28, 78, 15, 32, -86, -33, 49, 46, -64, -71, 60, 82, -91, 30, 10, -64, -15, -32, -9, 20, -21, 87, -82, 21, -69, 2, 69, -33, 70, -1, 62, 80, -57, 43, -41, -75, -1, 88, 9, 13, -44, -21, -62, 66, 72, -39, -77, -72, -87, 80, 37, -10, 80, -29, -78, -43, 65, -9, 11, -36, 75, -7, -43, -66, 75, 48, -53, -41, -31, -100, 20, -6, -45, -97, -17, -62, 25, 79, -23, -87, -93, 39, 70, -37, -31, -33, -51, -91, -59, 55, 26, -54, 62, 36, 37, 82, 93, 4, -34, 10, -82, -84, 39, 92, -52, -9, -9, -77, -19, -89, 72, -88, -88, -74, 11, 73, -60, -15, 88, -51, 30, -80, -36, 85, 13, -62, -1, -42, 61, 10, -41, 31, -22, 55, 59, -96, -18, -81, -98, 49, -29, 38, 87, 77, -49, 21, 55, -100, -51, 28, 24, -96, -70, -30, 13, -50, 36, -85, -45, -52, 47, 74, 0, -70, -31, -79, 75, -23, -44, -24, 43, 40, -51, -5, -97, -44, -30, 66, 1, 60, 7, 3, -60, -77, 40, 82, -76, 61, -88, 72, 32, 78, 14, -22, -91, -87, 5, -45, 6, 40, -13, -36, -49, -17, 71, 57, -11, 27, 83, 3, -40, 
  62, -11, -29, -33, -46, -88, -9, 83, -32, 30, 14, -7, 15, 68, 30, -3, -32, -54, 101, 86, -54, 20, -36, 50, -34, -1, 86, -76, 76, 15, 66, -82, -12, -6, -55, 36, -81, 48, -93, 98, -2, 3, -3, 1, -59, -80, 91, -61, -20, -19, -69, 62, -80, 50, 18, -4, 6, 69, 57, -27, -61, 16, 77, -52, 58, 37, -74, 74, -54, -41, 34, 93, -15, 67, 32, 68, 64, 73, 55, -20, 68, 67, 30, 25, -51, -5, 55, 23, -24, -43, -66, 64, -42, 90, -23, -93, -37, -47, -86, 0, -41, -60, 12, -10, 77, -11, -5, -72, -49, -7, -9, 46, 56, -103, 27, -20, 44, -30, -69, -32, -42, 39, -77, 8, -15, -73, -6, 52, -21, -79, 38, -86, -10, 37, 58, 75, -72, 33, 63, 96, 28, 53, -29, -100, -65, 33, 63, -81, 99, 64, -66, 95, -4, 81, -32, -83, 20, -34, 61, -46, 94, 31, -21, -55, 57, -40, -20, 52, 70, 32, -89, 69, 64, 101, 48, -71, -83, -33, 37, -15, 68, -40, 82, 11, -47, -87, 58, -76, -74, -75, 59, -61, 72, -14, -79, -15, 69, 80, -10, 12, -65, -39, -15, -57, -4, 90, 87, 7, 12, 79, -11, 49, 71, -44, -79, -52, 2, 2, -49, 25, 20, 94, -8, -8, 26, -71, 42, 94, 95, -21, -29, 0, 65, -44, -55, 66, 5, -87, 7, -75, -41, -10, -7, -59, -69, 32, 48, 88, 75, -82, -59, -35, 18, 77, 1, -39, 85, 39, 97, 27, 86, 79, -98, 83, 76, 29, -67, -35, 5, 66, -31, -57, -75, -15, 63, -2, -30, -61, -86, 79, 75, -52, 41, -69, -66, -6, 16, -91, -32, -66, 12, -5, -24, -77, -82, -29, 66, -19, -90, 88, -55, 34, -75, -88, 0, 38, -23, 34, -57, -87, -21, 53, -63, -43, 21, 29, 31, -72, -18, -92, -16, -69, 79, 80, -37, -38, 72, -61, -81, 42, 47, -22, 24, -51, -28, -97, 37, 93, -42, -70, 10, -25, 67, 31, 85, -35, -5, 35, 19, 64, 49, 33, 66, 72, -41, 20, 23, -4, -14, 44, -33, -29, -90, 40, -74, 89, -23, 14, 78, 53, -51, 14, 50, 17, -60, -28, -48, -56, 62, 49, -81, -52, -22, -66, 26, -48, 40, 17, -53, -68, -57, 37, 13, 20, -5, 41, 59, 43, -72, 85, 24, 9, -64, -76, 71, 26, 101, 80, 18, -31, 80, 57, -31, 23, 60, 46, -78, 56, 52, -99, 51, 52, 64, -49, -79, 46, -68, -4, -46, -10, 10, 38, -62, 51, -49, -25, -72, 7, 78, 0, -57, 74, -56, -85, 59, -2, 20, 58, -77, 87, -32, 61, 7, 19, -16, -49, 95, -53, -86, -47, 93, 5, 38, -43, 8, 12, 8, -8, -47, -77, -17, -4, -75, 67, 59, 21, -68, -11, 29, 81, -47, -61, 1, 29, 64, -10, 55, 70, -52, 6, 71, 29, 89, -6, -92, 45, 13, -12, 2, -63, -41, 1, 67, 21, 84, 4, 8, 27, -43, 77, -58, 79, -54, -6, 21, -47, 22, -14, 88, 62, -44, 48, -45, 16, 91, 67, 82, -46, -37, 16, -70, 64, -49, 49, -36, 17, 9, -54, 85, -17, 28, -39, 28, 29, -15, -11, 1, 37, 77, 23, 30, 13, -47, 8, -35, -14, -48, -55, 59, 84, 34, -32, 34, 16, 66, 100, 19, 27, 80, -89, 81, 98, -80, -22, -41, -70, 72, -4, 21, 50, 20, -22, -67, 19, 60, -45, 76, -66, 65, 77, 73, -67, 75, -65, 91, -55, 21, 67, 56, -48, 
  27, -93, 23, 38, 78, 28, -15, 31, -25, 44, -21, 101, -43, 51, -36, -91, -5, -25, -63, 111, 97, -50, -20, 15, -26, 114, -20, 17, -61, -12, 9, 105, 29, -100, -29, -71, -36, 41, 79, -51, 10, 43, 77, 119, 44, -17, 41, -73, -53, 67, -55, -16, 10, 29, -21, -39, -74, 77, 79, -91, -54, -13, 45, -66, 61, 24, 22, -24, -42, 96, -44, 21, -15, 44, 4, 15, -34, 56, -48, 39, 92, -94, 36, -7, 18, -102, 27, 36, 66, -50, -29, -67, -1, -70, -71, -51, -63, -87, -3, 48, -36, 51, -42, -84, -9, -59, -23, -73, 83, -11, -38, -70, 36, 65, 81, -24, 91, -10, -27, 41, -21, 30, 1, -74, 35, 46, -56, -71, -7, -4, 66, 6, -10, 27, -49, 59, -5, -14, 8, 13, -12, 45, 71, 79, 21, 66, -3, -82, 64, 10, 38, -43, 0, 41, 72, 20, -52, 45, -13, -41, 19, -75, 13, 10, -16, -37, -78, 39, -94, -17, 63, -39, -39, 25, -80, 54, -28, -90, -42, -5, 3, 99, -21, -44, -36, 27, 43, 93, 104, -5, -79, -19, 53, 78, -38, 33, 72, 53, -46, 24, -53, -10, -56, 13, -23, 81, -16, -68, -37, -16, -30, -53, -89, -13, 22, 37, 76, -83, -14, 57, -17, 15, 3, 69, 19, -53, -25, -8, -79, 40, 29, -64, -84, 65, 1, 22, 22, 52, 83, 48, 52, 12, -25, -21, 42, -5, -95, 8, -75, 77, 0, 76, -36, 70, 72, -86, -8, 98, -68, 93, -50, 23, 96, -34, -95, 24, 77, 7, 44, -62, 10, 27, -36, -53, 55, -72, -94, 62, -19, -73, 3, 84, 43, -29, 92, 16, -42, -30, 46, -5, 75, 68, -72, 19, -50, 4, 21, 53, -82, 4, -49, -82, 76, -43, 82, 20, 9, 66, 30, -74, -36, 36, 66, 81, -84, -93, 66, 23, -76, 32, 74, 58, 28, -44, -94, -74, -55, -79, 28, -62, 29, -40, -12, 49, 70, 67, -9, 74, 37, 42, 108, -40, 22, 76, 29, -14, 54, 14, -16, 12, 68, -53, 113, 54, -74, -9, -48, -8, -26, 1, 60, 68, 94, -18, -17, 51, -88, 66, -10, 53, 68, -2, 28, -66, -57, -84, 51, 25, -16, -52, 5, -16, -89, -92, 13, -80, 26, -60, -20, -44, 65, -3, -1, -109, 89, -55, 1, -50, 44, -85, -20, 71, -108, 17, 61, -16, 30, -93, -31, 67, 23, 48, 40, -15, -73, 22, 39, 52, 10, -43, -68, -83, 84, -42, -5, 3, -85, 98, -63, -37, -65, 52, -39, 3, 5, -81, 23, -22, -51, 45, -34, 24, -15, -50, 36, 53, -2, -15, -67, 79, -19, 23, -67, -8, -83, -1, -1, -40, -24, -55, 78, 75, 40, 28, -72, 39, 82, -69, 13, 73, 4, -33, -15, -33, 98, 85, -96, 80, 32, 58, -78, 30, 21, -48, -57, -22, -41, -38, -39, -50, -1, -9, 21, -14, 65, 3, -25, 87, 3, -6, 50, 54, 27, 27, -67, 71, -50, -66, 90, -76, -41, 32, 32, -64, 55, 51, 73, -79, -23, -77, -77, -2, -38, 46, -61, 26, 59, -55, -53, 3, 38, 23, 68, -33, 17, -19, -19, -44, 12, -3, -1, 90, -57, 62, -30, 65, -31, -57, -14, 58, 48, -37, 18, 64, 91, -6, -22, 45, -51, 42, 76, 67, -19, -62, -28, 15, 17, 50, 34, 41, -85, -39, -34, -42, -5, -77, 68, 93, -36, 21, 4, 67, 54, 77, 89, 92, -26, 5, 87, -30, 30, 19, 20, 14, 39, 72, 64, 7, -64, 54, 
  38, 82, 47, -29, -85, 51, -23, -60, -13, -27, 0, 51, 42, -40, 10, -52, 31, -52, 80, 12, 75, 51, 77, 29, 44, 53, 55, -22, 71, -95, 39, -94, -26, -14, -84, -35, -94, 71, -67, -4, -53, -54, -97, -44, -87, 14, -39, -17, -62, 21, -91, -104, 86, -63, 35, 38, 7, 31, -16, -43, 46, -28, 72, -49, -2, -95, 68, 60, 52, -59, -46, -34, 3, -81, -35, -96, -74, -45, -64, 73, -49, -65, -78, -46, 67, 15, -11, 21, 48, 43, -12, -90, -94, -34, 64, -17, 71, 15, 29, -66, -71, -69, -57, 35, 1, 53, -29, 3, 10, -16, -49, 49, 9, 36, 60, 79, 25, -71, 70, -30, 52, 67, -1, -41, 42, -90, 4, 84, -87, 58, -91, 70, -106, -32, -69, -14, -73, 80, 11, 73, 75, -17, 58, -57, -88, 7, 32, -76, -90, -60, 70, 47, -53, -76, -50, 50, -104, -92, 46, -29, 50, 1, 3, -79, -34, -100, -85, 18, 9, 14, 66, -24, 8, 61, 66, -47, 64, -41, -102, 28, -94, -40, -74, -43, -7, 33, -82, -44, -89, 37, 40, 37, -11, 45, -79, 30, -18, -44, -96, 66, 60, 18, -37, -32, 14, -32, 5, -95, 70, 36, 74, -66, -74, -49, 69, 19, 72, -94, -95, 37, 66, 43, 1, -36, -51, -97, -65, -94, 45, -65, 26, -20, -49, -64, 17, -22, -29, -17, 41, 47, -23, -6, 75, -19, 60, -71, -7, 35, 74, 22, 17, -59, 66, 81, -60, 26, -92, 29, 64, 35, 39, 61, -22, -43, 50, 19, -50, -86, -97, -21, 76, 1, 4, 9, 55, 20, -80, 49, -92, -32, -59, 63, -46, -82, 83, 48, 10, -11, -84, -97, 38, -2, 84, 77, -4, 50, 32, -43, -88, 77, 16, -4, 10, -17, -58, -60, -107, 36, -53, -77, -54, -74, 21, 35, -79, -21, -89, -78, -55, -89, 65, -44, 67, -4, -22, 18, -78, 1, 14, -87, 14, -5, 37, 11, -99, -22, 26, -20, -95, -55, 79, -38, -79, -57, 35, 7, -53, 48, -19, 32, 30, 68, 29, -16, 52, 19, -91, -77, -60, -93, 56, 16, -63, 24, 17, 49, 73, -34, -18, 57, -97, -22, -14, 12, -46, 74, 51, 46, -92, -96, 31, -86, 91, -50, 47, -91, 63, -32, 71, -55, 28, -96, 68, -65, -42, -24, 43, -82, -2, 79, -47, 84, -31, -45, -87, 1, 76, -89, 64, -70, 9, -47, -75, 88, -9, -51, -87, -94, 32, -21, 27, -3, -46, 83, 17, 83, -82, 49, 13, 37, 64, -55, 31, -92, 77, 21, 73, -31, -90, 74, 68, -83, -24, 12, -36, -1, -15, 72, -40, 63, -96, -28, 14, -17, -30, -25, 57, 67, -22, 0, -73, -93, -13, -17, -50, -99, 61, -38, 17, -82, -34, 19, -59, -15, 58, -43, -93, -67, -22, 80, 27, -17, 21, 29, -77, 7, -20, -26, -83, 29, 4, -34, -96, 90, -3, -73, -6, 32, -17, -23, -53, -60, -78, 13, -22, 58, 78, -103, -52, 33, 80, 80, -71, -54, 74, 45, -22, -68, -36, 61, 22, 31, -10, -8, 56, -84, 58, 25, 12, 90, 29, 23, -3, -15, -61, 66, 71, -102, -30, -64, -100, -57, 45, 22, 8, -11, -103, 23, 55, 75, 29, -67, -3, -17, -35, -56, -9, -75, -67, 16, -28, -86, -90, -82, 33, 59, -72, 43, 49, 91, -60, 50, -8, 61, 63, 28, -31, -82, -13, -60, 91, 87, -86, -56, 74, -78, -48, -40, -69, -47, -19, -94, -69, -39, -100, 11, 87, -97, 71, -11, 
  -62, 35, -97, 3, -62, 30, -78, 4, -74, -90, -79, -77, -93, -37, -69, 74, -19, 53, 66, -60, -19, 60, 11, 90, 98, 56, 22, 40, -7, 58, -24, -32, -59, 14, 60, 30, 80, 67, -17, 34, 14, 37, -31, 23, -39, -77, 62, 39, 95, -74, 45, 108, -91, -88, -41, 17, 47, 24, -92, 22, -72, -62, -70, 78, -7, -29, -84, -42, -75, 39, -80, 36, 79, -17, -48, -74, 73, -52, -98, 56, 40, 85, -74, -50, -70, 65, -55, -55, 25, 28, 71, 12, -15, -11, -3, 100, 4, -89, -51, -28, 63, -58, -62, -19, 19, 8, -94, -34, 47, 27, 57, -42, -50, -37, 91, 58, 74, 62, 63, 52, 83, -84, -45, 92, -41, 38, 76, -33, -51, 46, -52, -58, -25, -43, -82, 53, 70, 5, 26, -97, 81, -52, 41, 0, 20, 48, 86, 0, -77, -16, -88, -76, -57, -66, 78, -96, -71, 39, -98, -17, -27, -93, 38, 33, 15, -97, -42, -33, -11, -65, 34, 64, 60, -14, -86, -55, 14, -64, 62, -14, -92, -8, 55, 72, 37, -62, 95, 64, -19, 6, 3, -40, -30, 85, 30, -66, -37, -14, -74, -10, 62, 41, -52, -16, 52, 64, 71, -56, 77, -3, 17, -11, 6, 84, 9, -39, 59, 70, 40, 26, 9, 13, -87, -104, -74, -47, -20, -41, 11, 35, -87, -10, -21, 15, -49, 6, 87, -90, -36, -78, -33, 21, 42, -60, 40, 15, -20, -26, 19, 91, -36, 34, -7, -46, 43, -92, -60, 100, 85, -55, 98, 90, 57, -26, 80, -37, 17, 89, -23, 38, -29, -35, 112, 80, 27, -57, 44, 33, 93, 90, -79, 12, 3, 19, 29, -54, -62, 92, 2, 11, 15, -37, -3, 42, -24, -94, -72, -66, -59, -93, 88, -99, 34, -72, 38, -16, -65, -80, -37, 35, -11, 9, 39, 51, -25, -45, -19, -72, -56, -57, -56, -7, -33, 15, 48, 0, 25, 1, 38, 40, -43, -53, 13, -44, 34, 76, -28, -5, 41, 48, 40, -49, -11, 32, -36, 50, 55, -14, -55, -78, -13, -66, 71, -44, 32, -28, -33, 59, 25, 50, 20, -10, 29, -54, 24, -31, 72, 35, 75, -65, -67, -75, -43, -96, -2, 36, -14, -55, 85, 82, 45, -39, -92, -6, 83, 8, -54, 64, -41, -39, 33, 24, -77, 19, 43, -17, -28, -36, -28, 105, -80, 63, 75, 26, -86, 17, 42, 28, 45, 7, -39, -67, 62, -25, 57, -1, 85, -67, -62, 94, -8, -78, -58, -80, 49, 33, -4, -21, 40, -10, 37, -16, -44, -73, -16, -48, 70, 102, 75, 61, 66, -53, -51, 96, -44, -27, 73, 73, -31, -4, -59, 55, 77, 40, 56, 66, 55, 38, -29, 45, -92, -68, 58, -32, 42, 92, -75, -4, -73, -87, 52, -48, -45, -76, 18, 20, 78, -34, 47, -83, -57, 38, 37, -75, -49, -78, -18, -13, -98, 8, 56, 59, -56, 1, -66, 49, 96, 24, 69, 90, -49, -73, -50, -3, -51, -10, -10, 47, -51, -33, -23, -12, -70, 31, -47, 48, 55, -49, 29, 26, -55, -18, 15, -10, 82, 93, -39, 44, -36, 84, -73, 71, -30, 55, -65, -15, 81, 53, -24, 67, -71, 12, -11, 2, 28, -65, 62, -60, 48, 10, -38, 80, 8, -66, 68, 50, 54, -96, 63, 62, -4, -30, -2, -33, 18, 32, -4, -2, -25, 61, -54, -54, -56, -90, -87, -107, -88, 88, 3, 32, 85, -57, -85, -61, -20, -76, -76, 33, -32, -85, -38, 101, 17, 8, -27, -70, 74, 4, 24, 32, 
  107, 21, 41, -71, -79, -39, 74, 8, -8, 48, -80, 25, 39, -80, 39, -39, -8, -7, 48, 16, -88, 58, -95, 62, 89, -31, -52, -17, 48, 56, -75, -91, -85, -7, 79, 68, -13, -86, -84, 40, 23, -19, 19, -43, -37, 78, -9, -95, 66, 21, -35, -46, -30, -12, 79, 69, -65, -27, 11, -18, 35, 21, 57, 72, 12, -93, -72, 28, 41, 41, 60, 9, -4, -51, -5, 101, 16, -66, 61, 82, -47, -52, 19, -70, -33, 53, -35, 32, -45, -48, 11, 80, 42, -31, -16, 6, -36, 28, -83, 58, 71, 56, 54, 31, 42, -33, -5, -87, 84, -6, -26, 16, 22, 42, -75, 3, -32, 94, -39, -60, -34, -84, -66, -59, 71, 34, -58, 15, 34, -73, 56, -47, -58, -93, 22, 43, -19, -87, 99, 48, -42, -50, -53, 20, 0, -98, -16, -21, 35, -47, 10, 42, 35, 92, -62, -60, -29, -2, -22, 13, 62, -85, 84, 19, -15, 21, 14, -62, 8, 2, 55, -23, -51, -91, 81, 70, 29, 18, 17, 86, 40, -102, 38, -61, -37, 59, -65, 36, 92, 23, -71, -87, 82, -94, 7, 56, -27, -47, -72, -24, 29, 87, 26, -40, -14, 42, 20, 59, 21, -25, 9, -52, 63, 42, 7, -64, -55, 73, 18, 0, -16, -16, -23, -85, -30, 33, 68, 12, -32, 63, -42, -61, -15, 46, -76, 30, 26, -46, -3, 6, -20, 39, -67, -4, 49, -13, -44, 30, -54, 105, 19, -43, -77, 75, -24, 83, -18, 4, -22, -8, -82, -46, 4, 61, 66, 34, -17, 29, -69, -44, 81, 59, -77, 24, 40, 9, 19, 29, 76, 4, 1, 57, -9, 21, 30, -39, -6, 65, 94, 46, -78, 10, -55, -85, -68, 54, 49, 103, 24, 21, -27, 64, -17, 52, -42, 35, 73, -52, -5, 33, 56, -58, -32, 7, 30, -22, -61, 34, 21, -28, 5, 59, -36, 42, 58, 36, -81, 8, -82, 61, -80, 11, -83, -45, -40, 15, -46, -49, 52, 106, -26, -31, -50, -90, 19, 16, 59, 81, 80, 76, -29, 37, -24, -84, 103, 9, -32, 34, 0, 17, 55, -55, -81, 91, -77, -14, -59, -104, -79, -68, -16, -22, 22, 0, 13, 66, 1, -81, -11, 25, 36, -54, 35, 43, 89, -56, -68, 3, -41, 84, 13, 41, -99, 20, -60, 56, 0, 27, 21, 17, -16, -63, 16, -65, -27, -65, -10, 27, -34, -75, -80, -72, -86, -85, 74, -59, 68, 29, 64, -87, 65, 53, -90, -40, -26, 81, -16, 15, 82, -8, 42, -23, 93, -33, 50, -22, -26, 83, 11, 8, 47, 16, -95, 49, 102, 71, 82, 47, 68, 54, -17, 81, -50, 92, -80, -40, 52, -102, 20, 27, 7, 38, 45, 49, -29, -71, 46, -69, -26, -102, 19, 1, 72, -59, 89, 25, 47, -71, 53, 81, 26, 43, -43, 41, -50, 48, 50, 30, -75, -1, 62, 91, -48, 56, -23, -48, 55, 77, 23, -57, 24, 51, -96, 87, 41, -58, -20, -42, 19, -44, 53, -80, -41, 19, 7, -40, -49, 15, 34, 44, -79, -91, 89, 29, -16, -18, 7, -15, 12, 74, 53, 20, 56, -70, 61, -9, -47, 89, 31, -79, -44, -5, 78, 107, -22, -60, 26, -61, 62, 54, -34, -80, 42, 8, 10, -18, -4, 74, 14, -89, -10, -55, 4, -82, -17, -49, 5, 33, 66, 61, -41, -10, -37, -61, 45, 20, -55, 16, -94, 27, 94, 59, 3, 12, 66, 63, 88, 45, 66, -76, 18, -48, -41, -16, 92, 30, -35, 97, -86, 9, 
  -6, 19, 84, -23, -88, -90, 98, -57, 65, -16, 57, 80, 54, 54, -50, 40, -66, -42, 85, -15, -26, -19, 73, -2, 28, 17, 56, 41, 71, 28, -7, -39, -9, -41, 6, -37, -70, 4, 5, 50, 17, 48, 78, -42, -64, -38, -2, 32, -96, -37, -80, 41, -8, 29, 64, 19, 53, -38, -23, -63, 50, 25, 11, -44, 52, 69, 44, -33, -9, -34, -88, 13, -58, -72, 80, 22, 26, 77, 34, -6, 47, 75, -95, -45, -96, -106, -54, 31, -34, 69, 35, -94, -85, -80, 9, 34, 33, 64, -11, -33, -15, -4, 68, 54, 59, 33, -10, 96, 0, -99, -15, 19, 36, 29, -80, -59, -89, 7, 53, 35, 85, 72, 5, -27, -17, -31, -63, -85, 82, 50, -71, 41, 11, -27, -94, -13, -80, 61, -76, 33, -13, -7, -25, 43, 35, -81, 9, -48, -58, -32, 58, -54, 5, 4, -30, 50, 45, 66, 6, -23, 70, -16, -4, 35, -74, 28, -45, -52, 63, 16, 40, 2, 64, -42, 73, -27, 82, 95, -24, 75, -48, 55, 43, 46, -94, 25, -15, 23, 71, 48, -84, -45, -25, -84, -48, 63, 59, 52, -108, -50, -27, -99, 74, -69, -94, 27, -58, -95, -18, -10, -40, -10, -74, 6, -26, -52, -34, -33, -4, 59, 3, 85, -47, -34, 52, 6, 37, -35, 32, -77, -63, -58, 29, 9, 27, -15, 37, 60, -24, 2, 23, -67, -60, 26, 1, -24, -25, 32, -13, 3, 40, -60, -7, -38, -88, -59, 44, 30, 77, -24, -46, -46, -17, -77, -35, -61, 7, 2, -37, 68, -104, -15, 90, -22, -44, 0, 38, -58, 64, 34, 37, 3, 61, -21, 39, -33, -70, -18, 52, -8, -10, -6, -78, -65, -57, -22, 63, 93, 3, 45, 3, -35, 7, 91, 77, 89, -29, -42, 74, 14, 39, 77, -9, -7, -98, 42, 7, 53, -57, 71, -47, 27, 43, 30, 13, 65, 86, 19, -89, -47, -72, 10, 69, -67, -12, -52, -23, 27, 68, -37, -33, 49, -41, -2, 41, 75, -45, 22, 80, 15, 72, 53, -33, 58, -30, -7, 46, 33, 12, -7, -29, -65, 26, -39, 9, 20, -15, 8, -31, -22, 8, 87, -26, 27, 76, 33, -44, -27, 75, -59, -39, -48, -25, 11, -45, -35, -12, 30, -109, -69, -95, -115, 82, 77, 53, 45, 16, -111, 35, -42, 84, 45, -19, 16, -80, -31, -3, -30, -76, 29, -50, -89, 72, 87, -31, -58, 74, -43, 88, 49, 13, 76, 33, 44, 24, -64, -2, 76, -22, -85, 74, -43, 22, -40, 1, -48, 41, 99, 81, -10, 73, 102, -68, 33, 26, -75, 48, -8, -13, -3, 55, -21, -48, 7, 27, -74, 14, 57, 35, 54, -45, 64, -71, -77, -102, 67, 12, -89, 19, -94, 2, -114, -118, 85, 49, -127, -93, -25, -101, 61, 86, -7, -45, 4, 75, -70, -52, 62, -54, 18, 36, -36, 64, -29, 74, 4, -56, 55, 77, 82, 67, 16, -27, -40, -40, -75, -22, -60, -76, -48, -2, 58, -88, -74, -4, -89, 47, 17, 21, 49, -112, -81, 86, -47, -45, 32, -6, -53, 38, -33, -92, -19, -11, 17, -88, 20, -105, 45, -92, -80, -51, 18, -60, -65, 54, -43, -76, -84, -73, -90, -29, 61, 51, -120, 85, -38, 64, -38, -79, -94, 67, -12, -27, 4, -2, -50, -6, 6, -30, 0, -81, -47, 52, 19, 34, 85, 46, 5, 13, 4, -18, -40, 48, -114, -14, 81, -106, -9, -49, -113, -10, 73, -17, -95, 23, 51, 1, -26, -57, 4, 
  -35, -101, -8, -25, 45, -91, -52, -96, -88, 46, -22, -97, 21, 46, -42, 68, 1, -39, 77, -41, 36, 48, -76, 51, 45, -38, 3, -47, 67, -25, -44, 5, -89, 80, 54, 57, 70, -61, -81, -65, -18, 13, -83, -50, -89, -44, 82, 66, -23, 92, 77, -94, -96, 26, -67, -97, -55, 25, -25, 47, -30, -71, -65, 68, 13, 28, 68, 33, 11, 72, 2, -45, 54, 59, 21, -77, -40, 64, -64, -63, 4, 52, 99, 49, 96, 80, -92, -49, -9, 49, -76, 63, 9, 5, -87, -94, 26, -12, 48, -22, -82, 41, 43, 19, -17, -82, -24, 60, 37, -11, -20, -49, -18, -56, -78, 1, -46, -44, 76, 63, 40, -16, 48, -59, 35, 53, -94, 66, -37, 85, 10, 62, 88, 3, 38, 96, 49, 3, 80, 78, 67, 26, 57, -22, -25, -44, -91, 77, -37, -94, 29, -58, -12, 30, -2, 80, -68, 38, -51, -47, 42, -45, -93, -66, -84, -91, -22, 81, -45, -59, 72, -54, -81, 22, 36, 47, -56, 8, -67, -110, -85, -60, -48, -25, 36, -80, -67, -105, -61, -78, -13, 86, 3, 65, -50, 72, -21, 27, -65, -40, 14, 36, -63, 79, 8, -88, 23, 95, 9, 0, 43, -98, -41, 59, 75, 73, 74, -53, -25, -25, 38, 99, -1, -32, 74, 78, 41, -25, -81, 29, 33, -43, 14, 63, -44, -59, 25, 13, -69, 37, -66, 55, 77, -79, -91, 8, 54, -72, -75, 43, -100, 46, -90, 59, 32, -108, -52, 81, -25, 53, 20, 54, 66, 46, -19, -78, -43, -87, -10, -93, 74, 34, -60, -92, -39, 79, 19, -12, 8, -31, -2, -25, 86, -67, -27, -8, -45, 22, 48, -106, 10, 3, -3, 0, 86, -85, 15, -23, 61, -69, 81, 65, 40, 41, -2, -31, -58, -41, 80, 73, -10, 74, -22, 28, -48, 75, -16, -32, -35, 71, -97, -69, -18, 70, -13, 70, 82, 25, -60, -1, -18, 88, -92, 18, 29, -77, 63, 88, 85, -80, -14, -50, 92, -91, -20, 13, 84, -86, -80, 34, 32, 60, 16, 15, -37, 6, -41, -17, 81, -90, 40, -105, -56, 77, 6, 35, -5, 53, -49, -45, -77, -26, -80, 16, -36, -10, -59, -18, 83, -42, -64, 69, 47, 53, -15, -27, 16, -52, -15, 47, -52, 18, -15, 83, -44, 14, -11, -4, -64, -76, 27, 39, -22, -61, 46, 68, 35, -73, 8, 50, 72, 15, -20, 52, -17, -71, 1, 26, 11, -56, 48, -38, 31, 29, 83, 95, 46, -10, 92, 47, 20, 66, 41, 75, 16, -55, -71, 31, -58, 77, -57, -90, -28, -37, 77, 35, -51, 24, 45, 81, 16, -83, -65, 69, 1, -4, 37, -100, -83, -95, -46, -23, -57, 32, -61, 86, 64, -87, -21, 22, -52, -7, 47, 83, -6, -6, 64, -15, -33, -70, 95, -60, -49, -7, -76, 64, -76, 16, 41, -41, 71, 41, -82, 28, -37, -41, 87, 30, -40, -65, -78, 24, 61, 80, 4, -35, -44, 1, 7, 39, 80, 30, 34, -68, 25, 4, 84, 72, -65, 39, 52, 52, 106, -74, 32, 98, 64, 50, -58, 70, 86, -38, -2, -63, -32, -4, 41, -14, 82, 52, -36, -85, 38, 5, 9, -82, -79, -59, -35, 63, 68, -63, 37, -93, 55, -60, -5, 58, 95, -24, -98, 14, 38, -73, -62, 73, -2, -61, 27, -10, -35, -24, -14, 39, 62, 69, 11, 71, 36, -3, -6, -18, -53, 1, 84, 88, -16, 64, -40, -81, -84, -70, -54, -31, -76, 53, 9, 80, -14, 37, 
  51, -109, -57, 15, 74, 74, -62, 95, -37, 37, 23, 0, 97, 30, -45, -55, -101, -40, -69, -49, -88, -75, -27, -34, -47, -118, -59, 73, -35, 11, 25, -106, -68, -91, -25, 26, 44, -25, 82, -25, 68, 50, 82, -86, 84, -41, -21, 63, 97, 44, 45, 51, -82, -31, 92, -49, 25, 74, 30, -8, 10, -51, -9, -64, 42, 79, 83, 61, 19, 95, -84, -30, 69, -18, 23, -55, -56, -62, 59, -60, -57, 52, -30, -50, 53, 18, 61, 80, -6, -96, 4, 7, -66, 46, -118, -69, -41, 62, 4, -38, 0, 87, 27, -85, -60, 35, -16, -12, -35, 22, 64, -92, -75, 39, -65, 45, 64, -56, 47, -64, 0, -38, -26, -23, 80, 36, -66, 66, 53, 88, -84, -58, 34, -7, -68, -74, 37, -24, -35, 69, 90, -1, 46, -85, -13, 58, 44, -41, 53, 85, -28, -68, -80, -64, -13, 69, -45, -22, 42, -34, -38, 51, 53, -1, 5, 11, 42, -83, -70, -49, 74, -36, 27, 18, -33, -78, 14, 57, -36, 0, 53, -89, -49, 24, 8, 34, -75, -15, 99, 71, -36, -77, 50, 51, -11, 27, -67, 0, 61, -81, -29, 14, 28, 60, 77, 34, 40, -49, -34, 62, 17, 91, 36, -63, -59, 86, -30, -26, -24, 84, -71, 90, 42, 77, -15, 39, -95, 42, 93, 89, -65, 1, 67, 12, -29, -75, -76, -70, 10, 51, 25, -54, -64, 25, -86, 61, -61, -38, -20, 105, 53, -47, -65, 48, -95, -64, 3, -78, 4, -52, -52, 82, -66, -18, -59, -29, -61, 36, 56, -84, -16, -3, -81, 28, 77, -50, 6, -38, -44, -30, 28, 71, -33, -56, 76, 47, 13, 63, 49, -22, -11, -91, -24, 83, 37, 69, 5, 30, 71, -31, 54, 65, -65, 10, -98, -35, 33, 35, 70, 57, -87, 104, -48, 50, -5, -52, 19, -39, -31, -29, -46, -38, -102, 86, 72, -35, -25, -47, -3, 27, 23, -59, -15, -68, -58, -81, 31, 8, 43, 101, 38, 10, -1, 50, -57, 18, 54, -43, -44, -56, 55, -39, -72, -37, -22, -56, 30, -16, -47, -83, 57, -106, -31, 70, -79, -95, 84, -35, -38, -61, 73, -9, 18, -72, -27, -29, 68, 89, -22, 58, 64, 60, 79, -12, 63, -10, 106, -5, 42, 26, -74, -20, -8, 59, -24, -71, -35, -85, -26, -57, -93, 4, -61, 42, -74, -23, -29, 64, 78, 52, -82, -48, 30, 55, 6, 52, 87, 27, 67, 52, -24, -97, 24, 61, -53, 67, -12, 42, 83, -66, -12, -47, -71, -85, -87, -6, 16, -60, -47, 16, 3, -91, -96, -62, 82, -98, -2, 28, 31, -56, 88, 56, -8, 5, -9, 30, 63, -95, 58, 0, 24, 50, 30, -14, 77, 93, -47, -34, 83, -56, 37, 74, -46, -56, -107, -17, 66, 32, -93, 8, -4, -46, -81, 79, 13, 77, 89, -99, 39, -19, -72, 34, 34, 31, 47, -7, 42, 94, 53, 77, 56, 92, -6, 99, 13, 52, 0, -5, 41, 84, -49, 89, -88, 50, -95, -81, 17, -68, -48, -30, 72, 15, 13, 38, -40, 49, -47, 11, -28, -78, 13, 25, -85, -39, 49, -73, 58, -28, 21, 26, -25, -54, -60, 7, 62, -82, 89, -4, 0, 85, 77, 13, 34, 10, 46, 22, 44, -47, -51, 21, -66, -17, 57, -39, 9, -21, 46, -30, 78, -62, -86, -63, -65, -5, -42, 68, 4, 44, 7, 23, -37, 63, -1, -69, 34, 25, 22, -39, 38, -30, 65, -72, 43, -37, -35, -71, -51, -47, -5, 47, 
  78, -77, -50, 13, 20, -58, -49, 38, 47, 26, 89, -88, -80, 93, -87, -33, -75, 13, 61, -67, 78, 99, -33, 68, -97, -53, -18, -82, 76, -30, 88, -47, -45, 53, -16, -59, -72, 22, 75, -83, -85, 76, -85, 78, -16, 60, -28, -62, -85, -30, -22, 49, 45, -25, -67, -53, 73, -28, 81, -67, -5, 34, -69, 73, 8, 72, 70, 60, -29, 39, 15, -67, 77, -33, 72, 39, -36, 20, -9, 11, 46, -1, -62, -49, 4, -70, 67, -2, -75, 17, -45, 29, -12, 56, -78, 1, 77, 76, 76, 95, -84, 86, -58, 64, -75, -24, 54, -80, -24, -54, -39, 15, 92, 51, -77, 52, 87, -74, 66, 69, -41, -15, -19, -51, -66, -86, -6, 91, 73, -66, -27, -68, -9, -3, 55, 42, 81, 36, -81, 78, -35, 36, -29, -54, 65, 58, 29, -65, 48, 60, -36, -66, 66, 56, 63, -54, -30, 72, -26, -79, 40, 55, 7, -8, -71, -40, 33, 32, 63, -49, 56, 43, -41, -51, -77, 62, 83, 58, 24, 53, -76, -58, -74, 13, 34, 25, 24, 28, 81, 40, -84, 2, -23, 68, -34, -15, -87, 9, 68, 61, 77, -89, 72, -51, -92, 55, -96, -36, 0, 28, 28, 54, -44, -23, -15, 61, -47, -80, -100, 21, 7, 80, -44, 58, 51, 84, -9, -25, -50, -14, 52, 59, -32, -18, -58, -53, -2, 69, -70, -41, -43, 41, 80, -18, -31, -71, -68, 5, 16, 8, 6, -46, -22, 29, 18, -48, 35, -28, -65, 17, 71, -72, 89, -31, -9, 14, -51, -70, -36, 42, 63, -63, 78, 90, 93, -65, 5, -58, 70, -68, -10, -25, -74, 44, 48, 42, -81, -5, -41, -41, -74, -20, 52, -84, -36, 22, 87, -41, -86, -47, -22, 34, 55, -88, 10, -55, -16, 61, -59, 19, 12, -33, 87, -17, -90, -25, -35, 91, -40, 45, -34, 87, -89, -17, -79, 46, 25, -74, -41, 49, 14, -45, -91, -26, -5, 36, -16, -2, -39, -50, 92, 26, -88, 44, 5, -35, -30, -16, 83, -21, 31, -16, -28, -47, -84, 59, 68, 99, -50, -91, 21, 70, 52, 11, -68, -44, 44, 78, -44, 56, -77, 45, -26, -76, -25, -39, -61, -21, 91, -6, 53, 20, 38, 25, 54, -59, -62, 1, 9, -27, -65, -62, -80, 63, 62, 83, 20, 25, -31, -2, 74, 63, 3, -22, 87, 56, -79, -61, 6, -73, 85, 49, -43, 25, 49, -42, -69, 103, -70, -52, -79, -37, -40, 61, 78, 18, 65, 72, 60, 79, -59, 6, -49, -14, -43, -68, 20, -80, 80, 31, 87, -35, 44, 57, -3, 25, 39, -34, -81, -11, -3, -66, -78, 79, 24, 15, 84, -19, -32, 93, 25, -25, 4, -39, 69, 66, 47, -55, -88, 55, 69, -17, -11, -30, 73, -78, -58, 89, 93, 13, 89, 55, 13, 2, 74, -34, -36, 3, 45, 38, -45, 47, 60, 49, 33, -15, 58, 62, 11, 28, -87, 31, 9, -74, -48, -41, -11, -67, -51, 61, 105, 5, 31, 36, 30, -88, 76, 55, 25, -17, -48, -97, -5, 33, 9, -6, -74, 57, 87, 21, -106, 90, 19, -78, -12, -56, 69, -41, 6, -36, 87, -75, 0, 52, -30, -94, 104, 13, 23, 34, -20, -3, -33, -83, 55, 33, -15, -40, 43, 59, -81, -20, 27, -19, -62, 75, -14, -55, -65, -37, -76, 40, -61, -80, -22, 18, -40, 1, 32, 8, 49, -45, 95, 41, -36, -54, -89, -45, -49, -86, -14, 5, 82, 64, -54, -2, 60, -49, 28, -44, 
  -8, 83, -48, -101, -91, 49, -24, 11, 47, 21, -11, 43, -61, 44, 52, 64, 12, 51, 25, 56, -78, 69, -74, 45, 14, 7, -40, -44, -12, -52, 11, -30, -33, 36, 3, 19, -14, -82, 25, 68, 53, -41, 15, -71, 70, -69, -83, -16, -77, 67, 45, -18, 68, 87, 27, -54, 92, 32, -65, 89, -5, -54, 32, -47, 20, 51, 7, -49, 24, 53, -79, 96, 67, 82, 59, 58, -37, 39, 68, 42, -49, -63, 19, 102, 89, 78, 20, 44, 57, 103, -10, 95, 25, 52, 88, 69, -85, 44, 50, 34, 64, 82, 80, -34, 65, -69, 12, 36, 82, -50, 21, -89, -90, 7, 43, -68, -35, -94, -17, -8, -63, 6, -9, -47, 30, -16, -69, -45, -21, -82, -9, -21, 7, 93, -51, -49, -39, -13, 0, 14, -31, 14, -43, 10, 65, 17, 106, 5, -6, -50, 43, -18, -14, 69, 63, 61, -49, 60, -27, -81, -60, 105, -80, 49, 13, -34, -77, 61, 52, 21, -22, -52, -36, -68, 39, 87, -17, -102, -85, -25, 80, -55, -70, -66, -38, 11, -27, -40, -1, -104, -77, 53, 13, -73, 43, -93, -72, -78, 8, 41, 73, 62, -19, -22, 59, -5, 50, 58, -54, -72, -20, -50, -28, 70, -22, 89, 56, 48, 16, -70, -43, -67, 4, 63, -42, 3, 55, 28, -31, 5, 29, -31, 95, -63, -44, -55, -62, -55, 44, 52, -62, 78, -75, 13, -67, 36, 0, -38, 63, 6, -19, -70, 35, 42, -86, -6, 75, 43, -65, -84, -70, -33, 35, 93, 51, -83, 30, 67, 7, 11, -64, 16, -21, -33, -2, 17, 18, -42, -47, -3, -47, 39, -84, 78, -47, -31, -54, 69, -7, -46, 79, 15, 28, -64, -102, -51, -80, -89, -23, 64, 24, 15, 86, -92, 86, 10, 39, -16, 17, 83, -63, -19, -33, 42, -48, -90, 89, -49, 75, 93, 59, 60, -57, -72, 23, 39, 42, -82, -78, 14, 30, 26, -45, 31, -41, -72, 13, -60, 95, 55, -17, 35, -71, -44, 17, -55, -49, -77, 13, -43, 91, -67, -15, -47, 65, -29, -42, -40, 4, 30, -83, 52, 33, 58, 99, -22, -68, 53, -38, 18, 91, -23, -30, 27, -35, 35, -68, 25, 17, -65, -54, 75, -58, 30, -14, -34, 47, -2, 11, -15, -9, 0, 8, 0, -59, -24, -6, 76, -20, 65, 90, 100, 73, 32, 113, 84, 69, -58, -84, -81, 57, -51, 16, -21, -56, 35, 52, -97, 5, 5, -98, 56, -85, 55, -54, -62, -33, -44, 73, -63, 53, 72, -40, 24, 25, -96, 46, -56, 40, 49, 89, -29, -20, 86, -19, -61, -14, -18, -48, 28, -5, 75, 78, -92, -19, 6, -54, -30, -15, 36, -78, 95, -57, 7, 15, -45, -74, 52, 78, -63, -64, -47, 93, -58, 71, -59, -44, -69, -75, -12, -83, 72, 13, 56, -46, 63, -79, -88, 48, -93, -14, -28, 20, -86, 20, 68, 95, -87, 66, -60, 46, -17, 22, 79, 24, 106, 8, 74, 79, 89, -49, -78, 58, -26, -56, -74, -82, 90, -17, 76, 45, -51, 71, -88, 22, -13, -3, -12, 22, -49, -62, 37, -9, 78, 84, -88, 64, 89, 4, 40, -88, 40, 83, 38, -97, -64, 39, 2, -11, -45, 95, -75, -89, 18, 15, -80, 7, 38, -34, -41, 3, -1, 10, -88, -40, 39, -28, 53, -14, 75, 60, 19, -26, -39, -17, -22, -36, -63, 4, -39, -67, 17, -85, 80, 46, 9, -31, -6, -46, 25, -35, 48, -51, -79, -22, -22, -30, -88, -38, 90, 
  -1, -54, -46, -7, 86, -29, -36, -54, 31, -90, -70, -32, 7, 43, -40, 19, -69, -55, 28, -25, -84, -67, 40, -44, 29, -30, -17, 62, -71, 63, 26, -8, 57, -60, -23, -69, 27, -71, -53, 3, 7, -32, 14, 68, -30, -83, 74, -103, -19, -34, -7, -28, -12, -83, -29, -78, -20, -37, 67, -70, -78, 83, -58, -6, -62, 39, -8, -39, -1, 78, -80, -19, -63, 78, 69, 31, -39, 23, -77, 22, 17, 63, -81, -31, -25, 77, 11, -74, 99, -12, -1, 97, 93, 11, 26, -38, 9, -16, 91, -41, -6, -6, -14, -10, 82, 64, 43, 86, -22, -50, 44, 16, 73, -100, -96, 44, -44, 70, -40, -97, 34, -3, -72, -19, 96, 1, -19, -77, 65, 71, -19, 56, -26, 18, -90, -11, 59, -91, 72, -91, 61, -42, 52, -49, -67, 29, 84, 42, -4, 14, -62, -14, 71, 28, -5, -34, 32, 74, -62, -37, -87, 38, -32, 71, 79, -65, 81, -80, -30, 21, 49, -24, 45, 73, 31, -16, 42, 60, -80, 83, 58, -34, -84, 35, 89, -56, -69, 48, -106, 36, 87, -103, -75, 84, 74, 49, 22, -66, -39, 23, -73, 42, -71, -57, 68, 28, -106, -24, -67, -56, -89, 88, 39, -5, -45, -76, 61, -6, 53, 8, -78, -20, 66, -77, -14, -16, 61, -36, -75, 27, -86, -101, 83, -54, 9, 22, 98, 37, 77, 94, -59, -75, -51, -101, -51, -48, -25, -9, 46, 20, -7, 55, -88, -40, -39, -6, 40, 8, -93, 94, 53, -18, -9, 4, -1, 51, -9, -45, -83, -66, -63, 35, -60, -28, -81, -97, -85, -90, -55, -38, -78, -83, -27, 77, 10, 27, 0, -74, -12, 67, -31, -103, 6, -39, -27, -12, -67, 72, -51, -31, 75, 10, 33, 47, 23, 19, 3, 17, -79, 6, 57, -43, 16, -64, 53, -6, -20, -45, -15, 87, 71, -43, 60, -66, 53, -45, -10, -21, -45, -85, 70, 71, -30, 9, 51, -2, 59, 38, 43, 42, 62, 18, -96, 14, -44, 15, 95, -38, 38, -43, -22, -6, -48, 62, -74, -11, 70, -105, -73, -58, -33, -39, -23, -93, -21, 9, 56, -63, -49, -28, 51, -17, 72, -44, 85, 56, 88, -24, -110, 17, 22, -64, 22, 52, 69, 31, 55, 68, -40, 56, -78, -58, -78, -26, -7, -74, 9, -32, 97, 13, -10, 14, -9, 88, 27, -96, 21, 10, -61, 85, 32, -8, 49, -98, -83, -89, 74, -105, -64, 86, 9, -53, 12, -69, -80, -83, -83, 19, 78, -62, -21, 61, 22, -90, 71, -53, 56, -57, 7, -76, -44, 79, -26, -11, -68, -30, 66, 38, -48, -17, 35, -67, -37, -27, 7, 24, -21, 28, 0, -95, 7, 77, 49, 43, -22, 32, -73, 93, 57, 104, 83, -77, 68, -30, 50, -58, 33, 50, -39, 6, -29, -72, 47, -88, -40, -3, -23, -74, 58, 64, 92, 46, -63, -67, 81, 83, 17, -7, -78, 15, 73, 52, 102, 84, -20, -1, -12, -78, 2, 2, -52, 6, 39, 33, -73, 87, 11, 65, 63, 6, 45, 61, 12, -10, 45, -77, 83, -17, -35, 78, 61, -2, 42, -25, 6, 34, 20, -23, -46, -82, -57, 108, 63, -46, 0, 57, 6, -62, 73, -2, 103, -27, -24, 50, -45, -51, 96, 77, -92, -37, 45, 75, 96, -43, -76, -46, -40, -73, 41, 54, -57, -68, -51, 5, -58, -12, -12, 19, 11, -68, -40, 52, -92, -15, -86, 89, 53, -74, 28, 59, -56, -87, -14, 81, 50, 37, -33, 58, -51, 81, 
  -39, 16, 84, 46, 42, -21, -54, 53, 41, -26, -57, 96, -42, 48, -61, -41, -80, 32, 79, -65, 62, -44, -75, 108, -56, -77, -35, 23, -12, -42, -23, -79, 19, 9, -11, 112, 76, -73, 85, -88, -114, -8, 89, -44, 45, -62, -4, 103, -69, 31, -28, -52, 68, 66, 25, -86, 85, -88, -32, -31, 20, -88, 54, 79, -38, 58, -17, -16, 40, -30, 56, -18, 54, 71, 59, 15, -85, -55, 61, -88, -63, -91, -101, 24, 44, 68, -36, 18, 1, 40, -8, 68, -88, -64, 40, 46, 18, -61, 83, -109, 59, 41, -10, -73, -41, -102, -87, 101, 21, -101, -70, -44, 65, 23, -61, 15, 87, 97, -63, 6, -56, 67, 36, 76, -14, 51, 32, 64, 102, 70, 37, 58, -68, 65, 26, -31, 79, 75, 10, -28, -74, -92, -98, 82, 39, -13, 39, 30, 64, 10, 37, 69, -76, -73, 15, -12, -21, 24, 50, -44, -86, -75, -89, -22, 84, 66, -102, -34, 67, -2, -82, -42, 42, 72, 63, 56, 22, 10, -43, 74, 92, 74, 83, -43, -83, 39, 81, -20, 10, -76, 61, 73, -3, 81, 78, -75, 24, 72, 36, -59, 3, -57, 1, -54, 13, -48, 42, -38, 37, -31, -81, -18, 2, 4, -25, 64, -41, -81, 34, -78, -33, -10, -2, -43, -49, -3, -12, -43, -90, 0, 82, -18, 33, 45, 39, -40, 20, 41, 24, -47, 82, -99, -23, -96, -71, 6, 59, 27, 98, -33, 9, 80, -68, -51, 46, -61, -95, 18, -67, 75, 81, 78, -20, 28, -22, -51, -88, 2, -61, -47, 69, -50, 56, -79, 70, 34, 75, 16, 46, 49, -27, 0, -59, -15, -47, 46, -63, -61, 33, -23, -39, 28, -92, 7, 27, -79, -10, -24, -88, 72, 28, 9, 53, -30, -32, 27, -88, -16, 24, -20, 17, -79, 44, 35, -69, 30, -79, 5, 22, 16, -60, -78, 30, -63, 28, -29, -86, 47, 81, 55, -95, -23, -4, 5, -66, 34, 36, -13, -78, 91, 58, 34, -50, 23, -61, 44, 7, -7, 3, -51, 25, 49, 75, -34, -74, 66, -8, -29, 54, -55, -83, 28, -14, -85, 64, -24, 74, -58, 7, 73, -33, 49, -67, 28, 43, -67, -4, -26, -5, -38, -31, -31, -51, 86, 77, 61, -83, -60, -37, -1, 54, -11, -21, -70, 26, 69, 30, 66, 1, -78, 22, -44, -75, 21, -52, -64, -47, 0, -16, -52, -15, -17, 24, 88, 14, 34, -93, 66, -106, 38, 59, 63, 49, -44, 7, -31, -101, 44, 26, 38, -67, -61, -7, 48, 55, 81, -89, 4, -74, 3, -61, -66, -28, 11, -34, 61, 8, -69, -51, 9, -1, 58, 58, 50, -101, -17, -28, -12, 69, 42, 15, 44, -89, -66, 59, 6, -29, -77, -99, -41, 51, 3, 39, -28, 17, 24, 16, 26, -47, 87, -76, -64, -25, -35, -38, -11, -8, 50, -4, 44, -68, 49, 19, 69, 40, -81, 49, 6, -70, 61, 1, 4, 42, -22, 50, -83, 93, 50, -87, 54, 44, -86, -22, 55, -2, 86, 27, 18, 22, -40, 23, 14, 6, 46, -15, 48, 4, 57, -81, -96, 7, -9, -31, 22, 16, 22, 73, -37, 44, -75, 65, 23, -70, 62, 27, 31, 25, 20, -17, 29, -76, 94, 14, 60, 48, 8, -24, -71, 68, -69, -54, -34, -79, 62, 34, -13, 37, -74, -65, 15, 24, 44, 78, 35, -69, 53, 29, -40, -54, -64, 70, -31, -73, 36, 76, -71, 36, 80, -7, 64, 80, 41, -82, 6, -64, -3, -24, 78, 38, 76, 
  -66, -19, 58, -77, 45, 14, -45, -13, 3, -18, -92, -33, -70, -73, -76, -40, -8, -57, -41, 31, -45, 89, -52, 77, -28, -86, -2, -8, -94, -65, 64, -52, -69, -66, 80, 59, 42, -75, -84, -15, -76, 10, -43, 41, -4, -8, 93, 15, -71, -86, -1, -73, 39, -59, 64, -72, -62, -57, -35, 66, -29, -57, -63, 73, 40, -52, 80, -76, 5, 81, 60, 55, 73, -41, -83, 35, 81, 24, -17, 28, 37, 50, 78, 6, 55, 14, 88, 20, -8, -72, -76, 71, 55, -18, -67, -73, 62, 20, 83, -47, -98, 90, 33, 1, -55, 15, -61, -79, 20, 42, -77, 28, -96, -63, -38, -71, 30, 46, -82, -91, 83, -59, -35, 20, 20, 79, -17, -42, -1, 10, -85, -43, 5, -1, -6, -47, 31, 104, -35, 29, 75, -24, -19, -33, 84, 66, 28, 36, -12, -19, 3, 36, 78, 48, 0, -46, 49, -39, 90, -8, 20, -39, 42, -79, -27, -70, -37, 93, 7, 58, 72, -57, 79, 59, 4, 38, -71, -32, 54, 43, 53, -57, -104, 88, 48, -97, -84, -77, -34, 12, -17, 2, -23, -43, 18, -30, -40, -34, 62, -67, 65, -67, -23, 45, -11, -43, -49, 24, -26, -57, 10, 11, 75, 85, -47, 24, 70, 74, -8, 86, -48, 78, -15, 86, -8, 75, -64, 50, -1, -34, 32, -11, 56, -77, 20, -83, -49, 16, 48, -83, 25, -22, -7, 1, -30, 12, 28, -39, -3, -1, -24, 80, 70, -89, -63, -15, 75, -109, 10, 30, -67, 69, 58, -95, -83, 53, -2, 63, -90, 54, 85, -78, -29, 18, -40, -24, -85, -70, 65, 4, 93, 13, -21, 48, -69, -69, -7, 2, 35, 73, 20, -57, -13, 24, -8, -25, 13, 31, -94, 56, -24, 71, 102, 81, 12, -57, -63, 28, 5, 0, -40, 68, 1, 59, -35, 71, -33, 71, 5, -9, -5, 52, 15, 48, 44, -52, 11, 33, 78, 21, 81, 64, 23, -5, -103, -54, 68, 43, 43, 83, -48, -97, -72, 19, -87, 55, -4, -15, -80, -35, 21, -92, -83, 52, -39, 33, 96, -55, 86, 27, -5, 52, 53, -70, -53, -52, 29, -59, 39, 101, -13, 29, -27, -15, -17, 17, -32, -14, -79, 22, 88, -33, -76, -58, 18, -3, -79, -28, 28, 1, -73, 17, -28, 64, 69, 30, 51, -41, 22, 7, -20, -66, -13, 12, 84, -75, 37, 69, 81, -84, 46, 85, -51, -60, 28, 54, -18, 44, -81, -73, 14, -95, 85, -53, -11, 30, 8, 22, 61, -37, 90, -37, -63, -51, -46, -59, -13, 27, -81, -75, -38, -65, -32, 5, 41, -29, 5, -3, -66, -72, -15, 65, 29, -28, 35, 57, 30, 38, -14, -44, -37, -46, -77, -86, 73, 3, -69, 71, -4, -55, 50, 62, -58, -12, -50, 68, -6, -78, -65, -68, 19, -36, 13, 25, -28, 22, -50, 7, -49, 65, 72, 84, -36, -26, 88, -28, -70, -60, 87, 31, -1, 11, -34, 87, 83, 12, 35, 80, 35, 18, 65, 13, -20, 25, -64, 85, -40, -68, 44, 28, 61, -30, -48, 15, 98, -24, 51, 59, 2, 47, 71, -68, 59, 71, -22, 96, -79, 68, -1, -43, 6, 1, -17, -44, 21, -88, 2, -32, -93, -3, 29, -76, -43, -56, -32, 41, -92, 25, -53, 28, 55, 18, -29, -23, 85, -99, -9, 78, -72, -45, -84, 5, -36, 65, -74, -12, -32, -44, -38, -61, 62, -60, 73, 48, 79, -55, 67, -45, 8, -34, 25, 84, -59, -83, -78, -73, -9, -44, 45, 55, 
  -28, 66, -1, -68, -22, -36, 5, -19, 62, 45, -80, 68, 44, -8, -7, -62, -10, -84, -75, 15, -41, -109, 64, -78, -22, -7, -64, -51, 24, 69, -79, 6, 74, -71, -1, 29, -97, 13, -2, -28, -69, -71, 11, 47, -5, -87, -93, 20, -20, -2, 19, 28, -89, 27, 23, -58, 45, -101, -72, 74, -95, 55, -73, 14, -77, -15, -33, -67, -73, -77, -94, 57, -53, -18, -25, 10, -84, -96, -104, -48, 68, -28, -8, -84, -41, 28, 77, -28, 21, -5, -107, 6, -70, -41, 19, -82, -74, -74, 87, -68, -38, 62, 46, -78, -23, 42, -95, -71, -20, 48, 89, 57, -87, -66, 29, 5, -15, -66, -47, -12, 78, 8, 36, -63, 20, 56, -101, -6, -53, -19, -73, -3, 55, 46, 7, 75, 37, 69, -68, -45, 32, -84, 28, 20, -24, 68, -69, 46, -28, 34, -114, 40, -23, -50, -3, -90, -92, -27, -5, 30, -83, -93, 53, -38, 24, -94, 51, 50, 57, -70, -41, 44, 24, -29, -1, 47, -79, -13, -66, -37, 7, -68, -34, -24, -40, 26, -80, -27, -40, 63, -36, -28, 79, 39, 3, 44, -79, -74, 67, -82, 32, -110, 4, 51, 29, -24, -59, 56, 14, 22, -29, -21, -41, -2, 17, 21, -54, 46, 51, -66, -49, 55, 20, -17, 35, 57, -97, -50, -75, -93, 67, -66, -55, -13, -12, 66, -51, 63, 6, -14, 65, -79, -38, -113, -83, -21, -73, 86, 18, -75, -97, -24, -103, 63, -35, 29, 83, -30, 81, -53, -55, 56, -100, -25, 72, -77, 67, 4, 52, -75, 29, 90, 68, 9, 17, -41, -40, 55, 32, 26, -59, 28, 50, 12, 20, 15, -30, 89, 16, 75, 81, 65, -25, 36, -18, 60, -61, 27, 55, 63, 5, -66, 83, 47, -91, -47, -108, 84, -33, -68, 50, -55, -103, 39, -80, 54, -20, -26, -56, 40, -8, -41, -103, -70, -38, 30, -49, 15, -68, -31, -29, -33, -102, 6, -13, 0, -50, -47, 76, 37, -5, -51, 21, -83, 72, -49, -34, -10, -39, -66, -37, -81, -35, -44, 23, -40, 46, -20, 67, 16, -41, -56, -21, -53, 68, 13, -58, 78, -50, 55, 77, 43, -46, -80, -68, -103, 42, -73, -44, 70, -76, -100, 49, -39, 17, -91, -60, 12, 47, -28, -74, 44, 3, 59, 28, -55, -43, -59, -3, 81, 20, -96, 35, 58, -91, -72, -63, 43, -92, -58, -17, -55, 29, -5, -71, -59, -11, -39, 26, 77, -52, -46, -57, 43, 41, -57, -7, 83, -34, -40, -31, 22, -93, 45, 62, -97, -11, -25, -98, -24, -71, 45, -78, -88, -43, 29, 89, 48, 5, 19, -11, -3, 0, 0, -12, -33, 44, -38, 12, -68, 87, -16, -70, 28, -71, 45, 73, -42, 57, 21, 83, -62, 52, -34, -39, 74, 82, -113, 65, -41, -101, 80, -16, -103, 7, 12, -88, -98, 88, -87, -44, 51, -27, -24, -89, 74, 87, -68, -84, -96, -2, 2, 64, -1, 24, 19, -21, 11, -19, 69, -114, -42, 75, -56, 18, -49, 40, 54, -4, -6, 83, -23, -75, -45, 20, -32, -74, -68, -5, 88, -13, -96, 11, 81, 56, 21, 66, -17, 16, 26, -26, 15, -74, 10, -25, 12, 28, -62, -38, -91, 87, -87, 77, -13, 34, 4, -48, 65, 22, -75, 82, 34, 33, -56, 35, 53, -50, -92, -4, -96, 57, -36, 20, 15, 0, 48, -24, 8, 14, 44, 58, -26, 55, 28, -44, -50, -52, 86, 56, 42, -91, -35, -39, 22, -3, -45, -85, 62, 48, -10, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 20,600 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0010447493987157941, } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&g0::quant1_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.26490262150764465, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<1, float> quant8_scale = { 1, { 0.23278632760047913, } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&g0::quant7_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,4 } };
const TfArray<1, float> quant9_scale = { 1, { 0.30562514066696167, } };
const TfArray<1, int> quant9_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant7_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 600, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 12000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 608), (TfLiteIntArray*)&g0::tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension9, 4, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_786831_7_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_786831_7_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_786831_7_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_786831_7_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_786831_7_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
